namespace Mos6502;

public enum MosCycle
{
    None,
    /// <summary>
    /// add 1 to cycles if page boundary is crossed
    /// </summary>
    PageBoundary,
    /// <summary>
    /// add 2 to cycles if branch occurs to different page
    /// </summary>
    BranchPage
}

public static class Extensions
{
    private static readonly Dictionary<MosOpcode, Mos6502SR> ReadFlags = new()
    {
        // I've marked all the jumps, including conditonal and nonconditional jumps
        // as read "all" - because we never know if the code where we jump to, would read the registers or not
        { MosOpcode.ADC, Mos6502SR.D | Mos6502SR.C },
        { MosOpcode.AND, 0 },
        { MosOpcode.ASL, 0 },
        { MosOpcode.BCC, Mos6502SR.C | Mos6502SR.All },
        { MosOpcode.BCS, Mos6502SR.C | Mos6502SR.All },
        { MosOpcode.BEQ, Mos6502SR.Z | Mos6502SR.All },
        { MosOpcode.BIT, 0 },
        { MosOpcode.BMI, Mos6502SR.N | Mos6502SR.All },
        { MosOpcode.BNE, Mos6502SR.Z | Mos6502SR.All },
        { MosOpcode.BPL, Mos6502SR.N | Mos6502SR.All },
        { MosOpcode.BRK, Mos6502SR.All },
        { MosOpcode.BVC, Mos6502SR.V | Mos6502SR.All },
        { MosOpcode.BVS, Mos6502SR.V | Mos6502SR.All },
        { MosOpcode.CLC, 0 },
        { MosOpcode.CLD, 0 },
        { MosOpcode.CLI, 0 },
        { MosOpcode.CLV, 0 },
        { MosOpcode.CMP, 0 },
        { MosOpcode.CPX, 0 },
        { MosOpcode.CPY, 0 },
        { MosOpcode.DEC, 0 },
        { MosOpcode.DEX, 0 },
        { MosOpcode.DEY, 0 },
        { MosOpcode.EOR, 0 },
        { MosOpcode.INC, 0 },
        { MosOpcode.INX, 0 },
        { MosOpcode.INY, 0 },
        { MosOpcode.JMP, Mos6502SR.All },
        { MosOpcode.JSR, Mos6502SR.All },
        { MosOpcode.LDA, 0 },
        { MosOpcode.LDX, 0 },
        { MosOpcode.LDY, 0 },
        { MosOpcode.LSR, 0 },
        { MosOpcode.NOP, 0 },
        { MosOpcode.ORA, 0 },
        { MosOpcode.PHA, 0 },
        { MosOpcode.PHP, Mos6502SR.All },
        { MosOpcode.PLA, 0 },
        { MosOpcode.PLP, 0 },
        { MosOpcode.ROL, Mos6502SR.C },
        { MosOpcode.ROR, Mos6502SR.C },
        { MosOpcode.RTI, 0 },
        { MosOpcode.RTS, Mos6502SR.All },
        { MosOpcode.SBC, Mos6502SR.D | Mos6502SR.C },
        { MosOpcode.SEC, 0 },
        { MosOpcode.SED, 0 },
        { MosOpcode.SEI, 0 },
        { MosOpcode.STA, 0 },
        { MosOpcode.STX, 0 },
        { MosOpcode.STY, 0 },
        { MosOpcode.TAX, 0 },
        { MosOpcode.TAY, 0 },
        { MosOpcode.TSX, 0 },
        { MosOpcode.TXA, 0 },
        { MosOpcode.TXS, 0 },
        { MosOpcode.TYA, 0 },
        { MosOpcode.HLT, 0 },
    };
    
    private static readonly Dictionary<MosOpcode, Mos6502SR> WriteFlags = new()
    {
        { MosOpcode.ADC, Mos6502SR.N | Mos6502SR.Z | Mos6502SR.C | Mos6502SR.V },
        { MosOpcode.AND, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.ASL, Mos6502SR.N | Mos6502SR.Z | Mos6502SR.C },
        { MosOpcode.BCC, 0 },
        { MosOpcode.BCS, 0 },
        { MosOpcode.BEQ, 0 },
        { MosOpcode.BIT, Mos6502SR.N | Mos6502SR.Z | Mos6502SR.V },
        { MosOpcode.BMI, 0 },
        { MosOpcode.BNE, 0 },
        { MosOpcode.BPL, 0 },
        { MosOpcode.BRK, Mos6502SR.I },
        { MosOpcode.BVC, 0 },
        { MosOpcode.BVS, 0 },
        { MosOpcode.CLC, Mos6502SR.C },
        { MosOpcode.CLD, Mos6502SR.D },
        { MosOpcode.CLI, Mos6502SR.I },
        { MosOpcode.CLV, Mos6502SR.V },
        { MosOpcode.CMP, Mos6502SR.N | Mos6502SR.Z | Mos6502SR.C },
        { MosOpcode.CPX, Mos6502SR.N | Mos6502SR.Z | Mos6502SR.C },
        { MosOpcode.CPY, Mos6502SR.N | Mos6502SR.Z | Mos6502SR.C },
        { MosOpcode.DEC, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.DEX, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.DEY, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.EOR, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.INC, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.INX, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.INY, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.JMP, 0 },
        { MosOpcode.JSR, 0 },
        { MosOpcode.LDA, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.LDX, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.LDY, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.LSR, Mos6502SR.N | Mos6502SR.Z | Mos6502SR.C },
        { MosOpcode.NOP, 0 },
        { MosOpcode.ORA, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.PHA, 0 },
        { MosOpcode.PHP, 0 },
        { MosOpcode.PLA, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.PLP, Mos6502SR.N | Mos6502SR.Z | Mos6502SR.C | Mos6502SR.B | Mos6502SR.I | Mos6502SR.V | Mos6502SR.D },
        { MosOpcode.ROL, Mos6502SR.N | Mos6502SR.Z | Mos6502SR.C },
        { MosOpcode.ROR, Mos6502SR.N | Mos6502SR.Z | Mos6502SR.C },
        { MosOpcode.RTI, Mos6502SR.N | Mos6502SR.Z | Mos6502SR.C | Mos6502SR.B | Mos6502SR.I | Mos6502SR.V | Mos6502SR.D },
        { MosOpcode.RTS, 0 },
        { MosOpcode.SBC, Mos6502SR.N | Mos6502SR.Z | Mos6502SR.C | Mos6502SR.V },
        { MosOpcode.SEC, Mos6502SR.C },
        { MosOpcode.SED, Mos6502SR.D },
        { MosOpcode.SEI, Mos6502SR.I },
        { MosOpcode.STA, 0 },
        { MosOpcode.STX, 0 },
        { MosOpcode.STY, 0 },
        { MosOpcode.TAX, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.TAY, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.TSX, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.TXA, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.TXS, 0 },
        { MosOpcode.TYA, Mos6502SR.N | Mos6502SR.Z },
        { MosOpcode.HLT, 0 },
    };

    public static Mos6502SR GetReadFlags(this MosOpcode opcode) => ReadFlags[opcode];
    public static Mos6502SR GetWriteFlags(this MosOpcode opcode) => WriteFlags[opcode];
    
    public static Mos6502SR GetReadFlags(this MosInstruction instr) => ReadFlags[instr.Opcode];
    public static Mos6502SR GetWriteFlags(this MosInstruction instr) => WriteFlags[instr.Opcode];

    private static readonly Dictionary<(MosOpcode, MosAddressingMode), (int, MosCycle)> Cycles = new()
    {
        { (MosOpcode.ADC, MosAddressingMode.Immediate), (2, MosCycle.None) },
        { (MosOpcode.ADC, MosAddressingMode.ZeroPage), (3, MosCycle.None) },
        { (MosOpcode.ADC, MosAddressingMode.ZeroPageX), (4, MosCycle.None) },
        { (MosOpcode.ADC, MosAddressingMode.Absolute), (4, MosCycle.None) },
        { (MosOpcode.ADC, MosAddressingMode.AbsoluteX), (4, MosCycle.PageBoundary) },
        { (MosOpcode.ADC, MosAddressingMode.AbsoluteY), (4, MosCycle.PageBoundary) },
        { (MosOpcode.ADC, MosAddressingMode.IndirectX), (6, MosCycle.None) },
        { (MosOpcode.ADC, MosAddressingMode.IndirectY), (5, MosCycle.PageBoundary) },
        { (MosOpcode.AND, MosAddressingMode.Immediate), (2, MosCycle.None) },
        { (MosOpcode.AND, MosAddressingMode.ZeroPage), (3, MosCycle.None) },
        { (MosOpcode.AND, MosAddressingMode.ZeroPageX), (4, MosCycle.None) },
        { (MosOpcode.AND, MosAddressingMode.Absolute), (4, MosCycle.None) },
        { (MosOpcode.AND, MosAddressingMode.AbsoluteX), (4, MosCycle.PageBoundary) },
        { (MosOpcode.AND, MosAddressingMode.AbsoluteY), (4, MosCycle.PageBoundary) },
        { (MosOpcode.AND, MosAddressingMode.IndirectX), (6, MosCycle.None) },
        { (MosOpcode.AND, MosAddressingMode.IndirectY), (5, MosCycle.PageBoundary) },
        { (MosOpcode.ASL, MosAddressingMode.Accumulator), (2, MosCycle.None) },
        { (MosOpcode.ASL, MosAddressingMode.ZeroPage), (5, MosCycle.None) },
        { (MosOpcode.ASL, MosAddressingMode.ZeroPageX), (6, MosCycle.None) },
        { (MosOpcode.ASL, MosAddressingMode.Absolute), (6, MosCycle.None) },
        { (MosOpcode.ASL, MosAddressingMode.AbsoluteX), (7, MosCycle.None) },
        { (MosOpcode.BCC, MosAddressingMode.Relative), (2, MosCycle.BranchPage) },
        { (MosOpcode.BCS, MosAddressingMode.Relative), (2, MosCycle.BranchPage) },
        { (MosOpcode.BEQ, MosAddressingMode.Relative), (2, MosCycle.BranchPage) },
        { (MosOpcode.BIT, MosAddressingMode.ZeroPage), (3, MosCycle.None) },
        { (MosOpcode.BIT, MosAddressingMode.Absolute), (4, MosCycle.None) },
        { (MosOpcode.BMI, MosAddressingMode.Relative), (2, MosCycle.BranchPage) },
        { (MosOpcode.BNE, MosAddressingMode.Relative), (2, MosCycle.BranchPage) },
        { (MosOpcode.BPL, MosAddressingMode.Relative), (2, MosCycle.BranchPage) },
        { (MosOpcode.BRK, MosAddressingMode.Implied), (7, MosCycle.None) },
        { (MosOpcode.BVC, MosAddressingMode.Relative), (2, MosCycle.BranchPage) },
        { (MosOpcode.BVS, MosAddressingMode.Relative), (2, MosCycle.BranchPage) },
        { (MosOpcode.CLC, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.CLD, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.CLI, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.CLV, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.CMP, MosAddressingMode.Immediate), (2, MosCycle.None) },
        { (MosOpcode.CMP, MosAddressingMode.ZeroPage), (3, MosCycle.None) },
        { (MosOpcode.CMP, MosAddressingMode.ZeroPageX), (4, MosCycle.None) },
        { (MosOpcode.CMP, MosAddressingMode.Absolute), (4, MosCycle.None) },
        { (MosOpcode.CMP, MosAddressingMode.AbsoluteX), (4, MosCycle.PageBoundary) },
        { (MosOpcode.CMP, MosAddressingMode.AbsoluteY), (4, MosCycle.PageBoundary) },
        { (MosOpcode.CMP, MosAddressingMode.IndirectX), (6, MosCycle.None) },
        { (MosOpcode.CMP, MosAddressingMode.IndirectY), (5, MosCycle.PageBoundary) },
        { (MosOpcode.CPX, MosAddressingMode.Immediate), (2, MosCycle.None) },
        { (MosOpcode.CPX, MosAddressingMode.ZeroPage), (3, MosCycle.None) },
        { (MosOpcode.CPX, MosAddressingMode.Absolute), (4, MosCycle.None) },
        { (MosOpcode.CPY, MosAddressingMode.Immediate), (2, MosCycle.None) },
        { (MosOpcode.CPY, MosAddressingMode.ZeroPage), (3, MosCycle.None) },
        { (MosOpcode.CPY, MosAddressingMode.Absolute), (4, MosCycle.None) },
        { (MosOpcode.DEC, MosAddressingMode.ZeroPage), (5, MosCycle.None) },
        { (MosOpcode.DEC, MosAddressingMode.ZeroPageX), (6, MosCycle.None) },
        { (MosOpcode.DEC, MosAddressingMode.Absolute), (6, MosCycle.None) },
        { (MosOpcode.DEC, MosAddressingMode.AbsoluteX), (7, MosCycle.None) },
        { (MosOpcode.DEX, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.DEY, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.EOR, MosAddressingMode.Immediate), (2, MosCycle.None) },
        { (MosOpcode.EOR, MosAddressingMode.ZeroPage), (3, MosCycle.None) },
        { (MosOpcode.EOR, MosAddressingMode.ZeroPageX), (4, MosCycle.None) },
        { (MosOpcode.EOR, MosAddressingMode.Absolute), (4, MosCycle.None) },
        { (MosOpcode.EOR, MosAddressingMode.AbsoluteX), (4, MosCycle.PageBoundary) },
        { (MosOpcode.EOR, MosAddressingMode.AbsoluteY), (4, MosCycle.PageBoundary) },
        { (MosOpcode.EOR, MosAddressingMode.IndirectX), (6, MosCycle.None) },
        { (MosOpcode.EOR, MosAddressingMode.IndirectY), (5, MosCycle.PageBoundary) },
        { (MosOpcode.INC, MosAddressingMode.ZeroPage), (5, MosCycle.None) },
        { (MosOpcode.INC, MosAddressingMode.ZeroPageX), (6, MosCycle.None) },
        { (MosOpcode.INC, MosAddressingMode.Absolute), (6, MosCycle.None) },
        { (MosOpcode.INC, MosAddressingMode.AbsoluteX), (7, MosCycle.None) },
        { (MosOpcode.INX, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.INY, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.JMP, MosAddressingMode.Absolute), (3, MosCycle.None) },
        { (MosOpcode.JMP, MosAddressingMode.Indirect), (5, MosCycle.None) },
        { (MosOpcode.JSR, MosAddressingMode.Indirect), (6, MosCycle.None) },
        { (MosOpcode.LDA, MosAddressingMode.Immediate), (2, MosCycle.None) },
        { (MosOpcode.LDA, MosAddressingMode.ZeroPage), (3, MosCycle.None) },
        { (MosOpcode.LDA, MosAddressingMode.ZeroPageX), (4, MosCycle.None) },
        { (MosOpcode.LDA, MosAddressingMode.Absolute), (4, MosCycle.None) },
        { (MosOpcode.LDA, MosAddressingMode.AbsoluteX), (4, MosCycle.PageBoundary) },
        { (MosOpcode.LDA, MosAddressingMode.AbsoluteY), (4, MosCycle.PageBoundary) },
        { (MosOpcode.LDA, MosAddressingMode.IndirectX), (6, MosCycle.None) },
        { (MosOpcode.LDA, MosAddressingMode.IndirectY), (5, MosCycle.PageBoundary) },
        { (MosOpcode.LDX, MosAddressingMode.Immediate), (2, MosCycle.None) },
        { (MosOpcode.LDX, MosAddressingMode.ZeroPage), (3, MosCycle.None) },
        { (MosOpcode.LDX, MosAddressingMode.ZeroPageY), (4, MosCycle.None) },
        { (MosOpcode.LDX, MosAddressingMode.Absolute), (4, MosCycle.None) },
        { (MosOpcode.LDX, MosAddressingMode.AbsoluteY), (4, MosCycle.PageBoundary) },
        { (MosOpcode.LDY, MosAddressingMode.Immediate), (2, MosCycle.None) },
        { (MosOpcode.LDY, MosAddressingMode.ZeroPage), (3, MosCycle.None) },
        { (MosOpcode.LDY, MosAddressingMode.ZeroPageX), (4, MosCycle.None) },
        { (MosOpcode.LDY, MosAddressingMode.Absolute), (4, MosCycle.None) },
        { (MosOpcode.LDY, MosAddressingMode.AbsoluteX), (4, MosCycle.PageBoundary) },
        { (MosOpcode.LSR, MosAddressingMode.Accumulator), (2, MosCycle.None) },
        { (MosOpcode.LSR, MosAddressingMode.ZeroPage), (5, MosCycle.None) },
        { (MosOpcode.LSR, MosAddressingMode.ZeroPageX), (6, MosCycle.None) },
        { (MosOpcode.LSR, MosAddressingMode.Absolute), (6, MosCycle.None) },
        { (MosOpcode.LSR, MosAddressingMode.AbsoluteX), (7, MosCycle.None) },
        { (MosOpcode.NOP, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.ORA, MosAddressingMode.Immediate), (2, MosCycle.None) },
        { (MosOpcode.ORA, MosAddressingMode.ZeroPage), (3, MosCycle.None) },
        { (MosOpcode.ORA, MosAddressingMode.ZeroPageX), (4, MosCycle.None) },
        { (MosOpcode.ORA, MosAddressingMode.Absolute), (4, MosCycle.None) },
        { (MosOpcode.ORA, MosAddressingMode.AbsoluteX), (4, MosCycle.PageBoundary) },
        { (MosOpcode.ORA, MosAddressingMode.AbsoluteY), (4, MosCycle.PageBoundary) },
        { (MosOpcode.ORA, MosAddressingMode.IndirectX), (6, MosCycle.None) },
        { (MosOpcode.ORA, MosAddressingMode.IndirectY), (5, MosCycle.PageBoundary) },
        { (MosOpcode.PHA, MosAddressingMode.Implied), (3, MosCycle.None) },
        { (MosOpcode.PHP, MosAddressingMode.Implied), (3, MosCycle.None) },
        { (MosOpcode.PLA, MosAddressingMode.Implied), (4, MosCycle.None) },
        { (MosOpcode.PLP, MosAddressingMode.Implied), (4, MosCycle.None) },
        { (MosOpcode.ROL, MosAddressingMode.Accumulator), (2, MosCycle.None) },
        { (MosOpcode.ROL, MosAddressingMode.ZeroPage), (5, MosCycle.None) },
        { (MosOpcode.ROL, MosAddressingMode.ZeroPageX), (6, MosCycle.None) },
        { (MosOpcode.ROL, MosAddressingMode.Absolute), (6, MosCycle.None) },
        { (MosOpcode.ROL, MosAddressingMode.AbsoluteX), (7, MosCycle.None) },
        { (MosOpcode.ROR, MosAddressingMode.Accumulator), (2, MosCycle.None) },
        { (MosOpcode.ROR, MosAddressingMode.ZeroPage), (5, MosCycle.None) },
        { (MosOpcode.ROR, MosAddressingMode.ZeroPageX), (6, MosCycle.None) },
        { (MosOpcode.ROR, MosAddressingMode.Absolute), (6, MosCycle.None) },
        { (MosOpcode.ROR, MosAddressingMode.AbsoluteX), (7, MosCycle.None) },
        { (MosOpcode.RTI, MosAddressingMode.Implied), (6, MosCycle.None) },
        { (MosOpcode.RTS, MosAddressingMode.Implied), (6, MosCycle.None) },
        { (MosOpcode.SBC, MosAddressingMode.Immediate), (2, MosCycle.None) },
        { (MosOpcode.SBC, MosAddressingMode.ZeroPage), (3, MosCycle.None) },
        { (MosOpcode.SBC, MosAddressingMode.ZeroPageX), (4, MosCycle.None) },
        { (MosOpcode.SBC, MosAddressingMode.Absolute), (4, MosCycle.None) },
        { (MosOpcode.SBC, MosAddressingMode.AbsoluteX), (4, MosCycle.PageBoundary) },
        { (MosOpcode.SBC, MosAddressingMode.AbsoluteY), (4, MosCycle.PageBoundary) },
        { (MosOpcode.SBC, MosAddressingMode.IndirectX), (6, MosCycle.None) },
        { (MosOpcode.SBC, MosAddressingMode.IndirectY), (5, MosCycle.PageBoundary) },
        { (MosOpcode.SEC, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.SED, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.SEI, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.STA, MosAddressingMode.ZeroPage), (3, MosCycle.None) },
        { (MosOpcode.STA, MosAddressingMode.ZeroPageX), (4, MosCycle.None) },
        { (MosOpcode.STA, MosAddressingMode.Absolute), (4, MosCycle.None) },
        { (MosOpcode.STA, MosAddressingMode.AbsoluteX), (5, MosCycle.None) },
        { (MosOpcode.STA, MosAddressingMode.AbsoluteY), (5, MosCycle.None) },
        { (MosOpcode.STA, MosAddressingMode.IndirectX), (6, MosCycle.None) },
        { (MosOpcode.STA, MosAddressingMode.IndirectY), (6, MosCycle.None) },
        { (MosOpcode.STX, MosAddressingMode.ZeroPage), (3, MosCycle.None) },
        { (MosOpcode.STX, MosAddressingMode.ZeroPageY), (4, MosCycle.None) },
        { (MosOpcode.STX, MosAddressingMode.Absolute), (4, MosCycle.None) },
        { (MosOpcode.STY, MosAddressingMode.ZeroPage), (3, MosCycle.None) },
        { (MosOpcode.STY, MosAddressingMode.ZeroPageX), (4, MosCycle.None) },
        { (MosOpcode.STY, MosAddressingMode.Absolute), (4, MosCycle.None) },
        { (MosOpcode.TAX, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.TAY, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.TSX, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.TXA, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.TXS, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.TYA, MosAddressingMode.Implied), (2, MosCycle.None) },
        { (MosOpcode.HLT, MosAddressingMode.Implied), (1, MosCycle.None) }
    };

    public static int CyclesCount(this MosOpcode opcode, MosAddressingMode mode) => Cycles[(opcode, mode)].Item1;

    public static int CyclesCount(this MosInstruction instr) => Cycles[(instr.Opcode, instr.AddressingMode)].Item1;

    public static MosCycle CyclesMetaData(this MosOpcode opcode, MosAddressingMode mode) => Cycles[(opcode, mode)].Item2;

    public static MosCycle CyclesMetaData(this MosInstruction instr) => Cycles[(instr.Opcode, instr.AddressingMode)].Item2;

}